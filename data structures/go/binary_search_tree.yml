# ── OVERVIEW ────────────────────────────────────────────────────────────────
- title: "Binary Search Tree – Overview"
  difficulty: "medium"
  tags: ["bst", "identify"]
  Front: |
    Which data structure …

    - Maintains **left < parent < right** ordering
    - Offers **O(log n)** search/insert/delete when balanced
    - Can degrade to **O(n)** if inserted in sorted order without rebalancing
  Back: "Binary Search Tree"

# ── OPERATION CARDS ─────────────────────────────────────────────────────────
- title: "BST – Search (Balanced)"
  difficulty: "medium"
  tags: ["bst", "search"]
  Front: |
    func search(root *Node, key int) *Node {
        for root != nil && root.Val != key {
            if key < root.Val {
                root = root.Left
            } else {
                root = root.Right
            }
        }
        return root
    }
  Back: "Search (O(log n) on balanced tree)"

- title: "BST – Insert (Unbalanced worst‑case)"
  difficulty: "medium"
  tags: ["bst", "insert"]
  Front: |
    func insert(root *Node, key int) *Node {
        if root == nil { return &Node{Val: key} }
        if key < root.Val {
            root.Left = insert(root.Left, key)
        } else {
            root.Right = insert(root.Right, key)
        }
        return root
    }
  Back: "Insert (O(n) worst‑case)"

