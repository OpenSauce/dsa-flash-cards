# ── DOUBLY LINKED LIST ──────────────────────────────────────────────────────
- title: "Doubly Linked List - Overview"
  difficulty: "easy"
  tags: ["doubly linked list", "identify"]
  Front: |
    Which data structure …

    - Links each node to both **next _and_ previous** nodes
    - Allows **O(1)** insert/delete at both ends given pointers
    - Still has **O(n)** search by value?
  Back: "Doubly Linked List"

# insert at tail (with tail pointer)
- title: "DLL – Insert at Tail"
  difficulty: "easy"
  tags: ["doubly linked list", "insert"]
  Front: |
    tail.Next = &Node{Val: 9, Prev: tail}
    tail      = tail.Next
  Back: "Insert at tail (O(1))"

# delete node when pointer known
- title: "DLL – Delete Node"
  difficulty: "easy"
  tags: ["doubly linked list", "delete"]
  Front: |
    n.Prev.Next = n.Next
    if n.Next != nil {
        n.Next.Prev = n.Prev
    }
  Back: "Delete node with pointer (O(1))"

# search
- title: "DLL – Search by Value"
  difficulty: "easy"
  tags: ["doubly linked list", "search"]
  Front: |
    cur := head
    for cur != nil && cur.Val != x { cur = cur.Next }
  Back: "Linear search (O(n))"

