# ── QUICK SORT ─────────────────────────────────────────────────────────────
- title: "Quick Sort - Overview"
  difficulty: "medium"
  tags: ["quick sort", "identify", "sorting", "divide and conquer"]
  Front: |
    Which sorting algorithm …

    - Partitions around a **pivot**
    - Has **O(n log n)** average but **O(n²)** worst‑case
    - Often fastest in practice with good pivot choice?
  Back: "Quick Sort"

- title: "Quick Sort – Lomuto Partition"
  difficulty: "medium"
  tags: ["quick sort", "implementation"]
  Front: |
    ```go
    func quickSort(a []int, lo, hi int) {
        if lo < hi {
            p := partition(a, lo, hi)
            quickSort(a, lo, p-1)
            quickSort(a, p+1, hi)
        }
    }
    ```
  Back: "Quick Sort (avg O(n log n), worst O(n²))"
